//noinspection GroovyAssignabilityCheck
buildscript {
    ext {
        //noinspection GroovyAssignabilityCheck
        spring_dependency_management = "1.0.9.RELEASE"
        //noinspection GroovyAssignabilityCheck
        spring_boot_version = "2.3.5.RELEASE"
        //noinspection GroovyAssignabilityCheck
        spring_data_rel = "2.0.5.RELEASE"
        //noinspection GroovyAssignabilityCheck
        spring_version = "5.2.10.RELEASE"
        //noinspection GroovyAssignabilityCheck
        spring_data = "2.3.5.RELEASE"
        //noinspection GroovyAssignabilityCheck
        kotlin_version = "1.4.10"
        //noinspection GroovyAssignabilityCheck
        junit_version = "4.13"
    }

    //noinspection GroovyAssignabilityCheck
    repositories {
        maven {
            url "http://maven.aliyun.com/nexus/content/repositories/releases/"
        }
        maven {
            url 'https://dl.bintray.com/kotlin/kotlin-eap'
        }
        mavenCentral()
        mavenLocal()
        jcenter()
        google()
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:$spring_dependency_management"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    //noinspection GroovyAssignabilityCheck
    repositories {
        mavenLocal()
        maven {
            url "http://maven.aliyun.com/nexus/content/repositories/releases/"
            content {
                excludeGroupByRegex "com.mini"
            }
        }
        maven {
            url "https://raw.github.com/pangxchao/maven/master"
            content {
                includeGroup "com.mini"
            }
        }
        maven {
            url 'https://dl.bintray.com/kotlin/kotlin-eap'
            content {
                excludeGroup "com.mini"
            }
        }
        mavenCentral() {
            content {
                excludeGroup "com.mini"
            }
        }
        jcenter() {
            content {
                excludeGroup "com.mini"
            }
        }
        google() {
            content {
                excludeGroup "com.mini"
            }
        }
    }
}

subprojects {
//    apply plugin: "maven-publish"
//    apply plugin: "java-library"
//    apply plugin: "eclipse"
//    apply plugin: "maven"

    //noinspection SpellCheckingInspection
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "java"
    apply plugin: "idea"

    // 统一配置Group与版本
    group "com.mini"
    version "1.0"

    // 源文件运行版本与编译版本
    sourceCompatibility = "11"
    targetCompatibility = "11"

    dependencies {
        //noinspection GrUnresolvedAccess,SpellCheckingInspection
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        //noinspection GrUnresolvedAccess,SpellCheckingInspection
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        //noinspection GrUnresolvedAccess
        implementation "junit:junit:$junit_version"
    }

    compileKotlin {
        //noinspection GrUnresolvedAccess
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        //noinspection GrUnresolvedAccess
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    // 指定编译的编码
    tasks.withType(JavaCompile) {
//        options.compilerArgs.add "--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED"
//        options.compilerArgs.add "-parameters"
        options.encoding = "UTF-8"
    }

    // 生成Java文档的任务
    javadoc {
        //noinspection SpellCheckingInspection
        options.addBooleanOption('Xdoclint:none', true)
        options.encoding = "UTF-8"
    }

    //noinspection GrUnresolvedAccess
    java {
        //noinspection GrUnresolvedAccess
        withJavadocJar()
        //noinspection GrUnresolvedAccess
        withSourcesJar()
    }

    test {
        useJUnitPlatform()
    }

    task sourceJar(type: Jar) {
        //noinspection GrUnresolvedAccess
        from sourceSets.main.allSource
    }

    artifacts {
        //noinspection GrUnresolvedAccess
        archives sourceJar
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// 指定编译的编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
